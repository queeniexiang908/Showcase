r3d3
    khyberS - Khyber Sen
    queenieX - Queenie Xiang
    anishS - Anish Shenoy
    kellyW - Kelly Wang

           .--,-``-.                         .--,-``-.
          /   /     '.                      /   /     '.
         / ../        ;               ,---,/ ../        ;
  __  ,-.\ ``\  .`-    '            ,---.'|\ ``\  .`-    '
,' ,'/ /| \___\/   \   :            |   | : \___\/   \   :
'  | |' |      \   :   |            |   | |      \   :   |
|  |   ,'      /  /   /           ,--.__| |      /  /   /
'  :  /        \  \   \          /   ,'   |      \  \   \
|  | '     ___ /   :   |        .   '  /  |  ___ /   :   |
;  : |    /   /\   /   :        '   ; |:  | /   /\   /   :
|  , ;   / ,,/  ',-    .        |   | '/  '/ ,,/  ',-    .
 ---'    \ ''\        ;         |   :    :|\ ''\        ;
          \   \     .'           \   \  /   \   \     .'
           `--`-,,-'              `----'     `--`-,,-'

                        /[] _ _\
                       _|_o_LII|_
                      / | ==== | \
                      |_| ==== |_|
                       ||" ||  ||
                       ||LI  o ||
                       ||'----'||
                      /__|    |__\

============================================================
khyberS -- 2018-03-28 23:35:00

Created devlog.txt.

============================================================
kellyW, anishS, khyberS -- 2018-03-29 12:54:00

Chose data and outlined project description in README.

============================================================
khyberS -- 2018-03-29 17:38:00

Fixed changes in README in response to issues.

============================================================
khyberS -- 2018-03-30 23:35:00

Setup project files:

    package.json is for npm modules/dependencies like TypeScript, Webpack, and d3
    package-lock.json is autogenerated by npm
    tsconfig.json is for tsc, the TypeScript compiler
    webpack.config.js is for Webpack

    dist/ is for compiled files (e.x. minified JS)
    src/ is for all source files we write
        python/ is for all python flask files
            /util is for all utilities, like our own library modules
            /core is for all the modules that are directly related to this project
            app.py will be minimal, mostly just importing and call a "main()" from core/
        data/ is for all the raw data
        ts/ is for TypeScript (preferred over and compiled to JS)
        html/ is for HTML
        css/ is for CSS

============================================================
khyberS -- 2018-03-30 23:35:00

Ported some old TS util files in src/ts/util.

============================================================
khyberS -- 2018-04-03 22:25:00

Added actual data sets for flight delays in src/data.

The main file, flight.csv, is almost 600 MB, too big for Github,
so I had to use Git LFS (large file storage) to upload/link it to the repo.
When cloning, make sure to download and turn on Git LFS first.

Added DsvMissingDataStats, which I used to quickly analyze flights.csv
to determine which columns should be ignored
and how many full flight records we have (~6 million).

============================================================
khyberS -- 2018-04-04 18:13:00

Created src/cpp/BinaryFlightDelays, which will convert the 600 MB flights.csv
into a compact binary form containing only the needed data.
Loading a 600 MB file into the browser is very slow.
Manipulating such large, unstructured data will be very slow, too,
and it can often crash the browser (this happened while testing it).

I'm using C++ for this right now, because it's much easier to organize the data
into a compact binary format when there's a strong type system
with all the different types of signed, unsigned, and different-sized integers.
Perhaps, WebAssembly can also be used to performantly access this data in the browser, too,
and interop with the main JavaScript.

After examining the data in flight.csv:

Fields:
    year;
    month;
    dayOfMonth;
    dayOfWeek;
    airline;
    flightNumber;
    tailNumber;
    originAirport;
    destinationAirport;
    scheduledDepartureTime; // hhmm
    departureTime; // hhmm
    departureDelay; // -m*
    taxiOut; // m*
    wheelsOff; // mmmm
    scheduledTime; // m*
    elapsedTime; // m*
    airTime; // m*
    distance; // miles
    wheelsOn; // mmmm
    taxiOn; // m*
    scheduledArrivalTime; // hhmm
    arrivalTime; // hhmm
    arrivalDelay; // -m*
    diverted; // 0|1
    cancelled; // 0|1

ignored b/c not enough data:
    CANCELLATION_REASON
    AIR_SYSTEM_DELAY
    SECURITY_DELAY
    AIRLINE_DELAY
    LATE_AIRCRAFT_DELAY
    WEATHER_DELAY

I think these are the most useful fields,
the only fields we should be processing and displaying in any capacity.
Is there anything I'm missing or overlooking?
Are there any other important fields that can't be calculated from these?
Are there any other fields we can eliminate?

Useful fields:
 - day of year
 - airline
 - origin airport
 - destination airport
 - departureTime
 - arrivalTime
 - departureDelay / elapsedTime
 - arrivalDelay

Using this data, I also think these are some more specific things
that we should be calculating and showing the user:

    Use both the delays at departure and arrival.

    Color the planes based on how delayed they are:
        red = delayed
        green = on time
        (just like traffic)

    The color of the plane transitions throughout its flight,
    from the departure delay color to the arrival delay color.
    While in flight, the color will also fade out,
    so that the delay color is primarily concentrated
    near the airport that the delay should be associated with.

    The color delays at airports will build up over time,
    so that it is easy to visualize which airports are the most delayed.
    This means that, when delayed at an airport, a plane will leave behind
    a spreading residue of its delay color.

    The delay of an airport will be calculated multiple ways,
    which can be selected by the user:
        by percentage of delayed flights
        by severity of the delays
        by the raw number of delays

    There will also be a filter for a delay tolerance,
    where the user can say, for example, ignore delays that are less than 10 minutes.
    As a more advanced feature, the user will also have the option of entering
    a custom function that calculates how heavily a certain delay is weighed,
    that a function: (delayInMinutes: int) => severity: double.

    There will be a color key/legend mapping the color of a delay
    to how long the delay is, and this legend will adjust
    depending on what delay function the user selects.

    There will be a separate view (almost a separate page)
    that will show a bar chart for each airport, airline, etc. (whatever the user chooses)
    displaying how delayed that airport, etc. was,
    again depending on the delay function the user chooses.

    There will be a timeline above the map (for 2015, that's what our data has)
    that has three markers:
        two markers that designate the viewing period
        one marker in between that designates the current time
    The two outer markers begin at the ends of the timeline
    and can be placed by the user to change the viewing period.
    When the user clicks play, the flights, etc. are animated
    and the time marker progresses from the start to end marker.

    The time marker can also be dragged to any time at at any speed,
    which will be proportional to the speed of the animation,
    just like you can drag the cursor through a movie, for example.
    The farther the actual mouse is from the time marker, however,
    the slower the animation time progresses, just like in many video players.
    However, since the animation can only be run so fast,
    there is a maximum speed at which it can be dragged.
    If the user tries to drag it any faster, it just won't move.

    Each time the time period selection changes or any of the other settings/filters are changed,
    the animation must be reset, re-calculated, and rerun.
    I think it would be way to complicated to keep track of the parts
    that have to be adjusted, and it would be much easier to just restart everything.

============================================================
khyberS -- 2018-04-06 05:32:00

Wrote most of the C++/Wasm code:

    The C++ code has parts that run solely on the server
    to analyze and optimize the data/code,
    and parts that will be compiled to Wasm to interop with JS in the browser.

    I managed to compress each flight into 13 bytes
    (with ~6 mil flights that's ~78 MB, which is a lot less than 600 MB)
    with a simple Wasm API exposing the data of each flight.

    After more analysis of the data, which I have C++ code to do,
    I can figure out how to compress the data into even less bytes by packing each bit.

    All the code up to this point is written,
    but I haven't managed to compile all of it,
    not to mention testing it all.

Even the storage size isn't a problem anymore,
we still have 6 million flights that we have to analyze in real time.

I think the Wasm can be definitely leveraged to speed things up,
and especially offer more consistent performance
with lower latency that the user won't notice as much.

Instead of exposing all the flights stored in Wasm to JS
and letting the JS access it through interop'ing,
the computation can be moved to Wasm
while still letting the JS control
how the data is filtered, transformed, and rendered.

I'm not sure exactly how this will work out yet,
but I think things like filtering,
of which there are only a set number of possible filters,
can be easily moved to Wasm for computation,
but other parts will be much harder and would require
an interpreter/compiler of sorts implemented in Wasm.
Instead, we can just pass a JS function to the Wasm code in those cases.

============================================================
khyberS - 2018-04-08 00:58:00

factored out Date and Time structs from CompactFlight and CompactFlight::Side
and added extra methods computing other fields
(like scheduledTime, duration/elapsedTime, and soon distance),
which were originally in the CSV file

============================================================
khyberS - 2018-04-18 02:33:00

converted CompactFlight to new bit layout using C++ bit fields

bitfields are compacted using #pragma pack into:
    77 bit/flight
    10 bytes/flight
    32 bits/side (good for clean, fast, 32-bit aligned access)
    4 bytes/side

Thus, the flights will only use about 60 MB of memory, not that much,
and all the field accesses will still be fast

    The only possible slow field is distance(),
    which must look up each airport by index
    and compute distances based on airport coordinates.
    Adding a distance field in each CompactFlight would
    add 13 bits for a total of 90 bits, 12 bytes/flight.
    Or the airport-airport distances can be precomputed.

these bit sizes were based on the analysis run on the ranges of every field

============================================================
khyberS - 2018-04-10 18:12:00

Created Airline and Airport classes, which are basically indices into DynamicEnums.

Added a Geolocation class, between which distance can be computed.

Now a CompactFlight has a distance() method that uses pre-cached distances calculated between every airport.

============================================================
khyberS - 2018-04-10 18:37:00

Added TypeScript interfaces conforming to the exported Wasm interface from the C++ code,
stemming from the CompactFlight class.

Updated some exported methods in the emscripten bindings at the bottom of Flights.h.

============================================================
khyberS - 2018-04-12 00:42:00

Added Flights.ts, which exports the const flights,
which has a get() method returning a singleton Promise<Flights>.
On the first call, it fetches the data and instantiates the Flights object.

============================================================
khyberS - 2018-04-13 03:24:00

Got all the server side C++ code to work.

Running ./CompactFlights reads in the CSV files,
compacts them into Flights, and serializes them to flights.bin.
It then checks to make sure it can properly deserialize flights.bin.

Running the analyzeFields() function in CompactFields.cpp (instead of compactFlights()),
does the analysis of the ranges and bits required for each field.
This matches the manual analysis I did earlier, so all the bit fields are correct.

I commented out the Wasm bindings for now to focus on the C++ server side,
but now I'll go back and compile it all to Wasm.

Apparently templates have to implemented in header files,
so I moved all template implementations to .tcc files,
which are included at the bottom of their corresponding header.
This resolves most of the undefined reference issues.

Set values for static fields in Airport and Airline
in .cpp files, which resolves the rest of the undefined reference issues.
To do so, I also had to create an empty constructor for DynamicEnum.

Fixed Date class, b/c mktime() doesn't convert day of year to time.
I had to do the efficient day of year to month and day of month myself,
using an algorithm adapted from http://howardhinnant.github.io/date_algorithms.html.

Adding std::ostream &operator<< to Date and Time for printing.

Added Time::between(Time, Time) to calculate the time between,
checking if the first time is actually after the second time,
meaning that the days are different, and then negating the result accordingly.
Do do this, I also overloaded all the comparison operators.

============================================================
khyberS - 2018-04-14 00:33:00

Everything compiles and kind of runs in Wasm
(not what I want, but main()) now,
but the exports aren't working yet.

============================================================
khyberS - 2018-04-14 01:42:00

Wasm works! The exports appear to be working,
but the data fetching in Flask hasn't been set up yet,
so I haven't been able to fully test the Wasm yet.

============================================================
khyberS - 2018-04-14 20:25:00

The Wasm is almost completely linked in webpack now; I fixed all the bugs.

The main bug was the preamble.js emcc-generated JS for loading the wasm,
which ran the wasm with arguments to main.  These arguments defaulted to []
and were overrode by the functions arguments.
Normally, since the JS didn't run inside a function, these arguments were undefined,
but since webpack puts it in an IIFE,
there were unexpected arguments that were crashing the wasm running.

 The JS only and the HTML too versions are generated in
 src/cpp/BinaryFlightDelays/wasm from the Makefile,
 and then a Python script removes the arguments line.

 Webpack then bundles all the normal TS/JS into dist/r3d3.js
 and the wasm JS into dist/wasm.js,
 which both are included in dist/index.html,
 which is generated from src/html/index.html and html-webpack-plugin.

 src/ts/util/wasm/wasm.d.ts declares the Module interface and the Module global.
 src/ts/core/wasm.ts declares the r3d3/Flights extension functions to Module.

 I also wrote a minimal Flask server to serve (in dist/), index.html at '/',
 and all the data routes for flights.bin, airports.csv, airlines.csv, and CompactFlights.wasm.

 Right now, there is now dependency between r3d3.js and wasm.js,
 but there should be, because r3d3.js should only run once wasm.js has loaded.
 To introduce this dependency, and to expose the IIFE enclosed Module in wasm.js to r3d3.js,
 I'm going to add another python script that puts CompactFlights.js
 into a simple wrapper CompactFlights.ts.
 Since TS is a superset of JS, I can leave most of it all the same,
 but I can declare the type of Module so that I can import it in r3d3.js.
 After doing this, Webpack should be able to bundle everything in r3d3.js.

============================================================
khyberS - 2018-04-15 05:11:00

r3d3.js and wasm.js are correctly linked now.

r3d3.js's main() functions are registered as postRun functions in Module,
so they're run after the wasm code (it's empty main()) has finished running.

The JS Wasm interop isn't working yet,
but the bigger bug is in the Flask server.

I implemented a localStorage cachedFetch() method over fetch(),
although it doesn't work for large files like flights.bin,
since it exceeds localStorage's quota.

The reason I tried implementing this is that the Flask server
often doesn't receive the browser's request through fetch() for some reason.
I'm not sure if this an error in Chrome, Flask, or something on my computer.

============================================================
khyberS - 2018-04-15 05:58:00

The JS-Wasm interop is fixed.

Turns out I can't use raw pointer even with allow_raw_pointers(),
because then the functions have unbound types and fail in JS.
Now I can get the Flights object in JS,
I just have to finish writing the Flights API to access individual CompactFlights.

============================================================
khyberS - 2018-04-15 16:18:00

All of the Wasm seems to work.

I can interact with all of the CompactFlight methods and sub-objects from JS.
The only main Wasm thing left is to write a better API for Flights.

============================================================
khyberS - 2018-04-17 02:17:00

Added a bunch of JS and Flights API extensions to make manipulating them easier.

============================================================
khyberS - 2018-04-17 13:04:00

Fixed the SVG map. Instead of using <object>,
I make a fetch() call for the raw SVG string and add it to a div as innerHTML.

============================================================
khyberS - 2018-04-17 18:28:00

removed flights.csv, since it's too big (600 MB) and is eating up my Git LFS data plan

============================================================
khyberS - 2018-04-17 20:53:00

Added the lat, lng to x, y conversion in GeoLocation.

============================================================
xiangQ - 2018-04-18 0:30:00

Added a simple demo representing the final product of our project
The demo includes a svg file of the US map and dots representing some airports in the United States

============================================================
anishS - 2018-04-12 22:22:00

Added some D3 animations. I'm using small, blue svg rectangles to represent planes.
There is a "plane" generated at every airport when the page is launched.
When the fly button is clicked, the planes start flying
As of right now, I have them flying to some other arbitrary airport in the coordinates array.

============================================================
wangK - 2018-04-17 13:20:00

Worked on converting latitudes and longitudes into pixels on svg canvas

============================================================
anishS - 2018-04-17 18:30:00

To convert coordinates to pixels:
Longitude: ((long + 124) / 57)) * width of picture

Latitude: ((lat - 26) / 23) * height of picture

============================================================
wangK - 2018-04-17 23:30:00

Worked on fixing the formula that converts lat/lon to pixels
The points are scaled correctly relative to each other
but not relative to the picture of the map

============================================================
xiangQ - 2018-04-18 0:30:00

Added json files of data (coordinates) used for drawing the US map and airports
Drew map of the US states from coordinates using topojson
Added dots representing airports onto the map
Tried to match the dots to the map (scaling is a little off)

============================================================
khyberS - 2018-04-18 01:29:00

Deleted DS_Stores and added to .gitignore.

============================================================
khyberS - 2018-04-18 07:03:00

Updated README.md and fixed Makefiles.

============================================================
khyberS - 2018-04-19 04:22:00

Plotted all Airports.

Using d3.geoAlbersUsa(): GeoProjection,
I can map longitude, latitude to x, y on the SVG.
I adapted Queenie's code in index.js for drawing the states
using the d3.geoPath(projection), and then iterated through the airports,
creating circles at their locations with tooltips onmouseover
that display the airport name and IATA code.

I also reformulated the data loading flow.
The airlines, airports, and flights data is all loaded in parallel,
but the airlines and airports data is explicitly processed first
before the flights are loaded,
because the flights depend on the airlines and airports.
This was done in Flights.ts,
and I also had to rewrite the loading functions in C++.

============================================================
khyberS - 2018-04-19 04:29:00

Cleaned up index.html.

============================================================
khyberS - 2018-04-19 12:25:00

Started adding flight animation in Flight.render().

============================================================
khyberS - 2018-04-22 17:39:00

Fixed wasm flight renderer and interpolator and got flight.render() to work acceptably.

Also, gunicorn doesn't solve the Flask bug.

============================================================
khyberS - 2018-04-22 18:12:00

Got basic flight rendering to work fairly well.

Just run renderFlightInDay(0) to animate all the flights on day 0,
and renderFlights() to animate them all.
It does take a while because it lags, though.

============================================================
khyberS - 2018-04-22 19:33:00

Made map white with black colors so flights are easier to see.

Started implementing a flight filter: flightFilter.
stopRenderingFlights(stop=true) stops the current flight rendering.

============================================================
khyberS - 2018-04-22 19:51:00

The flight filters work on the JS side and you can remove() them, too.
Just need a user interface to add new filters.

============================================================
khyberS - 2018-04-22 20:35:00

While flights.bin stalls, randomly make new requests and open new tabs
to try to wake up the Flask server.

============================================================
khyberS - 2018-04-22 21:23:00

Make the dots actual airplane figures using an SVG path
and CSS transforms that are d3 transitioned.
It's even slower than it was before with the dots.

If I used CSS transitions, it would definitely be faster,
because the GPU would aggressively be used by the browser,
instead of d3, which just uses the CPU for interpolation.

I'm not sure if I'm allowed to use CSS transitions, though.

============================================================
khyberS - 2018-04-23 00:36:00

Moved FlightFilters to FlightFilters.ts and added FlightFilters.addDynamically(),
which adds a new filter from a function body string.

============================================================
anishS - 2018-04-23 00:38:23

Added the html for filtering flights by airport. Added code in
r3d3.ts to populate the dropdown but it currently gives a memory
access issue.

============================================================
khyberS - 2018-04-23 00:54:00

Fixed filter dropdown menu (added correct types and moved to FlightFilters.ts).

============================================================
khyberS - 2018-04-23 04:04:00

Added Flight Filter UI.

============================================================
khyberS - 2018-04-23 05:02:00

Added Start and End date inputs and a Fly and Cancel Flights buttons.

============================================================
khyberS - 2018-04-23 05:02:00

Updated README.md.  I'm finally done!

============================================================